import java.io.IOException;
import java.sql.* ;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;
import java.sql.*;

import org.commonmark.node.*;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;
import java.util.*;
import java.text.SimpleDateFormat;
import java.io.PrintWriter;

/**
 * Servlet implementation class for Servlet: ConfigurationTest
 *
 */
public class Editor extends HttpServlet {
    /**
     * The Servlet constructor
     * 
     * @see javax.servlet.http.HttpServlet#HttpServlet()
     */
    public Editor() {}

    public void init() throws ServletException
    {
        /*  write any servlet initialization code here or remove this function */
    }
    
    public void destroy()
    {
        /*  write any servlet cleanup code here or remove this function */
    }

    /**
     * Handles HTTP GET requests
     * 
     * @see javax.servlet.http.HttpServlet#doGet(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
        // implement your GET method handling code here
        // currently we simply show the page generated by "edit.jsp"
        String action = request.getParameter("action");
       
        if (action == null) {
        response.sendError(400, "fail to get action attribute from doGet" );
        return;
        }else if(action.equals("open")){
            open(request, response);
        }else if(action.equals("preview")){
            preview(request, response);
        }else if(action.equals("list")){
            // response.sendError(400, "in the list" );
            list(request, response);
        }else{
        response.sendError(400, "fail to get correct action attribute from doGet" );
        return;
        }
    }
    
    /**
     * Handles HTTP POST requests
     * 
     * @see javax.servlet.http.HttpServlet#doPost(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
	// implement your POST method handling code here
	// currently we simply show the page generated by "edit.jsp"
        // request.getRequestDispatcher("/edit.jsp").forward(request, response);
        String action = request.getParameter("action");
        if(action.equals("open")){
            open(request, response);
        }else if(action.equals("preview")){
            preview(request, response);
        }else if(action.equals("list")){
            list(request, response);
        }else if(action.equals("save")){
            save(request, response);
        }else if(action.equals("delete")){
            delete(request, response);
        }else{
        response.sendError(400, "fail to get correct action attribute from doPost" );
        return;
        }
    }

    private void open(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {

        int integer_postid = 0;
        
        String action = null, username = null, postid = null, title = null, body = null;

        action = request.getParameter("action");
        username = request.getParameter("username");
        postid = request.getParameter("postid");
        title = request.getParameter("title");
        body = request.getParameter("body");
        if (username == null || postid == null) {
            response.sendError(400, "null value for username or postid" );
            return;
        }
        
        try 
        {
            // checking valid integer using parseInt() method
            Integer.parseInt(postid);
        } 
        catch (NumberFormatException e) 
        {
           
            response.sendError(400, "postid is not a valid integer" );
            return;
        } 
        integer_postid=Integer.parseInt(postid);
        if(integer_postid==0){
            if(title == null){
                request.setAttribute("title", "");
            }
            if(body == null){
                request.setAttribute("body", "");
            }
            request.getRequestDispatcher("/edit.jsp").forward(request, response);
            return;
        }else if (integer_postid>0){
           
            if (title != null && body != null){
                request.getRequestDispatcher("/edit.jsp").forward(request, response);
                return;

            }else{
                Connection con = null;
                PreparedStatement ps = null;
                ResultSet rs = null;
                try{
                    con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", ""); 
                    ps = con.prepareStatement("SELECT * FROM Posts WHERE username = ? AND postid = ?");
                    ps.setString(1, username);
                    ps.setInt(2, integer_postid);
                    rs = ps.executeQuery();
                    if(!rs.next()){
                        response.sendError(404, "(username, postid) row does not exist in the database" );
                        return;
                    }else{
                        title = rs.getString("title");
                        body = rs.getString("body");
                        request.setAttribute("title", title);
                        request.setAttribute("body", body);
                        request.getRequestDispatcher("/edit.jsp").forward(request, response);
                        return;
                    }

                } catch (Exception ex) {
                    /* ignored */ 
                } finally {
                        try { rs.close(); } catch (Exception e) { /* ignored */ }
                        try { ps.close(); } catch (Exception e) { /* ignored */ }
                        try { con.close(); } catch (Exception e) { /* ignored */ }
                    }

            }
            
        

        }

          

    }

    private void save(HttpServletRequest request, HttpServletResponse response) 
        throws ServletException, IOException {
        int integer_postid = 0;
        String action = null, username = null, postid = null, title = null, body = null;
        action = request.getParameter("action");
        username = request.getParameter("username");
        postid = request.getParameter("postid");
        title = request.getParameter("title");
        body = request.getParameter("body");
        if (username == null || postid == null) {
            response.sendError(400, "null value for username or postid" );
            return;
        }
        if(title == null || body == null){
            response.sendError(400, "null value for title or body" );
            return;
        }
       
        try 
        {
            Integer.parseInt(postid);
        } 
        catch (NumberFormatException e) 
        {
            response.sendError(400, "postid is not a valid integer" );
            return;
        }

        integer_postid=Integer.parseInt(postid);
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        integer_postid = Integer.parseInt(postid);
        try {
            con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", ""); 
            if (integer_postid <= 0) {
                ps = con.prepareStatement("SELECT MAX(postid) AS max FROM Posts WHERE username = ?");
                ps.setString(1, username);
                rs = ps.executeQuery();
                if (!rs.next()) {
                    integer_postid = 1;
                } else {
                    integer_postid = rs.getInt("max") + 1;
                }
                
                // try { rs.close(); } catch (Exception e) { /* ignored */ }
                try { ps.close(); } catch (Exception e) { /* ignored */ }
                
                ps = con.prepareStatement("INSERT INTO Posts VALUES(?,?,?,?,NOW(),NOW());");
                ps.setString(1, username);
                ps.setInt(2, integer_postid);
                ps.setString(3, title);
                ps.setString(4, body);
                ps.executeUpdate();
                list(request, response);
            } else {
                ps = con.prepareStatement("SELECT * FROM Posts WHERE username = ? AND postid = ?");
                ps.setString(1, username);
                ps.setInt(2, integer_postid);
                rs = ps.executeQuery();
                if (rs.next()) {
                    // try { rs.close(); } catch (Exception e) { /* ignored */ }
                    try { ps.close(); } catch (Exception e) { /* ignored */ }
                    ps = con.prepareStatement("UPDATE Posts SET title=?,body=?,modified=NOW() WHERE username = ? AND postid = ?");
                    ps.setString(1, title);
                    ps.setString(2, body);
                    ps.setString(3, username);
                    ps.setInt(4, integer_postid);
                    ps.executeUpdate();
                    list(request, response);
                }else{
                    response.sendError(404, "(username, postid) row does not exist in the database" );  
                }
            }
        } catch (Exception ex) {
            /* ignored */ 
            
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { ps.close(); } catch (Exception e) { /* ignored */ }
            try { con.close(); } catch (Exception e) { /* ignored */ }
        }
         



    }



    private void delete(HttpServletRequest request, HttpServletResponse response) 
        throws ServletException, IOException {
        int integer_postid = 0;
        String action = null, username = null, postid = null, title = null, body = null;
        action = request.getParameter("action");
        username = request.getParameter("username");
        postid = request.getParameter("postid");
        title = request.getParameter("title");
        body = request.getParameter("body");
        if (username == null || postid == null) {
            response.sendError(400, "null value for username or postid" );
            return;
        }
        try 
        {
            Integer.parseInt(postid);
        } 
        catch (NumberFormatException e) 
        {
            response.sendError(400, "postid is not a valid integer" );
            return;
        }

        integer_postid=Integer.parseInt(postid);
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", ""); 
            ps = con.prepareStatement("SELECT * FROM Posts WHERE username = ? AND postid = ?");
            ps.setString(1, username);
            ps.setInt(2, integer_postid);
            rs = ps.executeQuery();
            if(rs.next()){
                try { rs.close(); } catch (Exception e) { /* ignored */ }
                try { ps.close(); } catch (Exception e) { /* ignored */ }
                ps = con.prepareStatement("DELETE FROM Posts WHERE username = ? AND postid = ?");
                ps.setString(1, username);
                ps.setInt(2, integer_postid);
                ps.executeUpdate();
                PrintWriter out = response.getWriter();
                out.println("<!DOCTYPE html>");
                out.println("<html>");
                // <meta http-equiv="Refresh" content="0; URL=https://redirected-url.com/">
                String url="/editor/post?action=list&username="+username;
                out.println("<head>");
                out.println("<meta http-equiv=\"Refresh\" content=\"0; URL="+url+"\">");
                out.println("</head>");
                out.println("</html>");
                out.close();



                // list(request, response);
            }else{
                response.sendError(404, "row does not exist in the database" );
                return;
            }


            

        }catch (Exception ex) {
            /* ignored */ 
            
        } finally {
            // try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { ps.close(); } catch (Exception e) { /* ignored */ }
            try { con.close(); } catch (Exception e) { /* ignored */ }
        }
  
  
    }

    private void preview(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String action = null, username = null, postid = null, title = null, body = null;
        action = request.getParameter("action");
        username = request.getParameter("username");
        postid = request.getParameter("postid");
        title = request.getParameter("title");
        body = request.getParameter("body");
        if (username == null || postid == null) {
            response.sendError(400, "null value for username or postid" );
            return;
        }
        try 
        {
            Integer.parseInt(postid);
        } 
        catch (NumberFormatException e) 
        {
            response.sendError(400, "postid is not a valid integer" );
            return;
        }

        if(title == null || body == null){
            response.sendError(400, "null value for title or body" );
            return;
        }
       
        
        Parser parser = Parser.builder().build();
        HtmlRenderer renderer = HtmlRenderer.builder().build();
        String title_html = renderer.render(parser.parse(title));
        String body_html = renderer.render(parser.parse(body));
        request.setAttribute("preview_t", title_html);
        request.setAttribute("preview_b", body_html);
        request.getRequestDispatcher("/preview.jsp").forward(request, response);
        
    }

    private void list(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
        int integer_postid = 0;
        String action = null, username = null, postid = null, title = null, body = null;
        action = request.getParameter("action");
        username = request.getParameter("username");
        postid = request.getParameter("postid");
        title = request.getParameter("title");
        body = request.getParameter("body");
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String modified_string=null, created_string=null;
        Date modified_date=null, created_date=null;
        

        if (username == null ) {
            response.sendError(400, "null value for username" );
            return;
        }
        // response.sendError(400, "crash" );

        try {
            con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", ""); 
            ps = con.prepareStatement("SELECT * FROM Posts WHERE username = ? ORDER BY postid");
            ps.setString(1, username);
            //  response.sendError(400, username );
            rs = ps.executeQuery();
            // response.sendError(400, "crash here2" );
            if(!rs.next()){
                response.sendError(404, "username does not exist in the database" );
                return;
            }else{
                try { rs.close(); } catch (Exception e) { /* ignored */ }
                rs = ps.executeQuery(); 
            }
            List<PostInfo> posts = new ArrayList<>();
            SimpleDateFormat formatter = new SimpleDateFormat("MM-dd-yyyy HH:mm");
           
            while (rs.next()) {
                username = rs.getString("username");
                integer_postid = rs.getInt("postid");
                title = rs.getString("title");
                body = rs.getString("body");
                modified_date = rs.getTimestamp("modified");
                created_date = rs.getTimestamp("created");
                modified_string = formatter.format(modified_date);
                created_string = formatter.format(created_date);
                PostInfo p = new PostInfo(username,integer_postid,title,body,modified_string ,created_string);
                posts.add(p);
            }
            request.setAttribute("posts",posts);
            request.getRequestDispatcher("/list.jsp").forward(request, response);

        }catch (Exception ex) {
            /* ignored */ 
            
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { ps.close(); } catch (Exception e) { /* ignored */ }
            try { con.close(); } catch (Exception e) { /* ignored */ }
        }

    }




}

